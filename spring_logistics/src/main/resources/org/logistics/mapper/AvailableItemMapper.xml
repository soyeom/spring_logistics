<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.logistics.mapper.AvailableItemMapper">

	<select id="getAvailableItems"
		resultType="org.logistics.domain.AvailableItemVO">
		SELECT
		w.warehouse_name AS warehouseName,
		w.warehouse_id AS warehouseId,
		i.bu_id AS buId,
		i.asset_class AS assetClass,
		i.item_name AS itemName,
		i.spec AS spec,
		i.item_id AS itemId,
		i.base_unit AS baseUnit,
		i.safety_stock_qty AS safetyQty,

		<!-- 가용재고 (입고완료 + 입고예정 - 출고예정)-->
		<!-- 利用可能在庫 （入庫完了＋入庫予定−出庫予定）-->
		(
		NVL(SUM(CASE WHEN im.inbound_complete = 'Y' THEN id.qty ELSE 0 END), 0)
		+ NVL(SUM(CASE WHEN im.inbound_complete = 'N' THEN id.qty ELSE 0 END),
		0)
		- NVL(SUM(CASE WHEN om.out_complete = 'N' THEN od.qty ELSE 0 END), 0)
		) AS availableQty,

		<!-- 입고 예정 세부 (미완료 N)-->
		<!-- 入庫予定詳細 -->
		SUM(CASE WHEN im.inbound_complete = 'N' AND im.inbound_type = '生産依頼' THEN
		id.qty ELSE 0 END) AS requestQty,
		SUM(CASE WHEN im.inbound_complete = 'N' AND im.inbound_type = '購買発注' THEN
		id.qty ELSE 0 END) AS orderQty,
		SUM(CASE WHEN im.inbound_complete = 'N' AND im.inbound_type = '積送依頼' THEN
		id.qty ELSE 0 END) AS transferQty,
		SUM(CASE WHEN im.inbound_complete = 'N' AND im.inbound_type = 'その他入庫依頼' THEN
		id.qty ELSE 0 END) AS inboundQty,
		SUM(CASE WHEN im.inbound_complete = 'N' THEN id.qty ELSE 0 END) AS
		expectedQty,

		<!-- 출고 예정 세부 (미완료 N)-->
		<!-- 出庫予定詳細 -->
		SUM(CASE WHEN om.out_complete = 'N' AND om.out_type = '受注' THEN od.qty ELSE 0
		END) AS receivedQty,
		SUM(CASE WHEN om.out_complete = 'N' AND om.out_type = '積送依頼' THEN od.qty ELSE
		0 END) AS deliveryQty,
		SUM(CASE WHEN om.out_complete = 'N' AND om.out_type = '委託出庫依頼' THEN od.qty
		ELSE 0 END) AS shipmentQty,
		SUM(CASE WHEN om.out_complete = 'N' AND om.out_type = 'その他出庫依頼' THEN od.qty
		ELSE 0 END) AS otherQty,
		SUM(CASE WHEN om.out_complete = 'N' THEN od.qty ELSE 0 END) AS expectedOutQty

		FROM item_master i
		LEFT JOIN warehouse_detail w
		ON w.bu_id = i.bu_id
		LEFT JOIN inbound_detail id
		ON i.item_id = id.item_id
		AND w.warehouse_id = id.warehouse_id
		LEFT JOIN inbound_master im
		ON id.inbound_id = im.inbound_id
		LEFT JOIN out_detail od
		ON i.item_id = od.item_id
		AND w.warehouse_id = od.warehouse_id
		LEFT JOIN out_master om
		ON od.out_id = om.out_id

		GROUP BY
		w.warehouse_name, w.warehouse_id,
		i.bu_id, i.asset_class, i.item_name, i.spec,
		i.item_id, i.base_unit, i.safety_stock_qty

		HAVING
		(
		NVL(SUM(CASE WHEN im.inbound_complete = 'Y' THEN id.qty ELSE 0 END), 0)
		+ NVL(SUM(CASE WHEN im.inbound_complete = 'N' THEN id.qty ELSE 0 END),
		0)
		+ NVL(SUM(CASE WHEN om.out_complete = 'N' THEN od.qty ELSE 0 END), 0)
		) > 0

		ORDER BY w.warehouse_id, i.item_id
	</select>



	<select id="searchAvailableItems" parameterType="map"
		resultType="org.logistics.domain.AvailableItemVO">

		SELECT
		w.warehouse_name AS warehouseName,
		w.warehouse_id AS warehouseId,
		i.asset_class AS assetClass,
		i.item_name
		AS itemName,
		i.spec AS spec,
		i.item_id AS itemId,
		i.base_unit AS
		baseUnit,
		i.safety_stock_qty AS safetyQty,

		SUM(CASE WHEN
		im.inbound_complete = 'N' AND im.inbound_type = '生産依頼' THEN
		id.qty ELSE
		0 END) AS requestQty,
		SUM(CASE WHEN im.inbound_complete = 'N' AND
		im.inbound_type = '購買発注' THEN
		id.qty ELSE 0 END) AS orderQty,
		SUM(CASE
		WHEN im.inbound_complete = 'N' AND im.inbound_type = '積送依頼' THEN
		id.qty ELSE 0 END) AS transferQty,
		SUM(CASE WHEN im.inbound_complete =
		'N' AND im.inbound_type = 'その他入庫依頼' THEN
		id.qty ELSE 0 END) AS
		inboundQty,
		SUM(CASE WHEN im.inbound_complete = 'N' THEN id.qty ELSE 0
		END) AS
		expectedQty,

		(
		NVL(SUM(CASE WHEN im.inbound_complete = 'Y' THEN id.qty ELSE 0 END), 0)
		+ NVL(SUM(CASE WHEN im.inbound_complete = 'N' THEN id.qty ELSE 0 END),
		0)
		- NVL(SUM(CASE WHEN om.out_complete = 'N' THEN od.qty ELSE 0 END), 0)
		) AS availableQty,

		SUM(CASE WHEN im.inbound_complete = 'N' AND im.inbound_type = '生産依頼' THEN
		id.qty ELSE 0 END) AS requestQty,
		SUM(CASE WHEN im.inbound_complete = 'N' AND im.inbound_type = '購買発注' THEN
		id.qty ELSE 0 END) AS orderQty,
		SUM(CASE WHEN im.inbound_complete = 'N' AND im.inbound_type = '積送依頼' THEN
		id.qty ELSE 0 END) AS transferQty,
		SUM(CASE WHEN im.inbound_complete = 'N' AND im.inbound_type = 'その他入庫依頼' THEN
		id.qty ELSE 0 END) AS inboundQty,
		SUM(CASE WHEN im.inbound_complete = 'N' THEN id.qty ELSE 0 END) AS
		expectedQty,

		SUM(CASE WHEN om.out_complete = 'N' AND om.out_type = '受注' THEN od.qty ELSE 0
		END) AS receivedQty,
		SUM(CASE WHEN om.out_complete = 'N' AND om.out_type = '積送依頼' THEN od.qty ELSE
		0 END) AS deliveryQty,
		SUM(CASE WHEN om.out_complete = 'N' AND om.out_type = '委託出庫依頼' THEN od.qty
		ELSE 0 END) AS shipmentQty,
		SUM(CASE WHEN om.out_complete = 'N' AND om.out_type = 'その他出庫依頼' THEN od.qty
		ELSE 0 END) AS otherQty,
		SUM(CASE WHEN om.out_complete = 'N' THEN od.qty ELSE 0 END) AS expectedOutQty

		FROM item_master i
		LEFT JOIN warehouse_detail w
		ON w.bu_id = i.bu_id
		LEFT JOIN inbound_detail id
		ON i.item_id = id.item_id
		AND w.warehouse_id = id.warehouse_id
		LEFT JOIN inbound_master im
		ON id.inbound_id = im.inbound_id
		LEFT JOIN out_detail od
		ON i.item_id = od.item_id
		AND w.warehouse_id = od.warehouse_id
		LEFT JOIN out_master om
		ON od.out_id = om.out_id

		<where>
			<if test="buId != null and buId != ''">
				AND w.bu_id = #{buId}
			</if>
			<if test="warehouseName != null and warehouseName != ''">
				AND w.warehouse_name LIKE '%' || #{warehouseName} || '%'
			</if>
			<if test="assetClass != null and assetClass != ''">
				AND i.asset_class LIKE '%' || #{assetClass} || '%'
			</if>
			<if test="bigCategory != null and bigCategory != ''">
				AND i.big_category = #{bigCategory}
			</if>
			<if test="midCategory != null and midCategory != ''">
				AND i.mid_category = #{midCategory}
			</if>
			<if test="smallCategory != null and smallCategory != ''">
				AND i.small_category = #{smallCategory}
			</if>
			<if test="itemName != null and itemName != ''">
				AND i.item_name LIKE '%' || #{itemName} || '%'
			</if>
			<if test="itemId != null and itemId != ''">
				AND i.item_id LIKE '%' || #{itemId} || '%'
			</if>
		</where>

		GROUP BY
		w.bu_id, w.warehouse_name, w.warehouse_id,
		i.asset_class,
		i.item_name, i.spec,
		i.item_id, i.base_unit, i.safety_stock_qty

		HAVING
		NVL(SUM(CASE WHEN im.inbound_complete = 'Y' THEN id.qty END), 0) > 0
		OR NVL(SUM(CASE WHEN im.inbound_complete = 'N' THEN id.qty END), 0) >
		0
		OR NVL(SUM(CASE WHEN om.out_complete = 'N' THEN od.qty END), 0) > 0

		ORDER BY w.warehouse_id, i.item_id
	</select>

	<select id="getBusinessUnits"
		resultType="org.logistics.domain.AvailableItemVO">
		SELECT bu_id AS buId
		, bu_name AS buName
		FROM business_unit
		ORDER BY bu_id
	</select>

	<select id="getAssetClasses"
		resultType="org.logistics.domain.AvailableItemVO">
		SELECT DISTINCT asset_class AS assetClass
		FROM item_master
		ORDER BY asset_class
	</select>

</mapper>
