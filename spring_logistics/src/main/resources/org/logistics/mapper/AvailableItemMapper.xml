<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.logistics.mapper.AvailableItemMapper">

	<select id="getAvailableItems"
		resultType="org.logistics.domain.AvailableItemVO">
		SELECT w.warehouse_name AS warehouseName
		, w.warehouse_id AS
		warehouseId
		, i.asset_class AS assetClass
		, i.item_name AS itemName
		,
		i.spec AS spec
		, i.item_id AS itemId
		, i.base_unit AS baseUnit
		,
		i.safety_stock_qty AS safetyQty
		, SUM(CASE WHEN im.inbound_complete =
		'N' AND im.inbound_type = '생산의뢰'
		THEN id.qty END) AS requestQty <!-- 입고 미완료(N) 
			+ '생산의뢰' 유형 -->
		, SUM(CASE WHEN im.inbound_complete = 'N' AND im.inbound_type = '구매발주'
		THEN id.qty END) AS orderQty <!-- 입고 미완료(N) + '구매발주' 유형 -->
		, SUM(CASE WHEN im.inbound_complete = 'N' AND im.inbound_type = '적송요청'
		THEN id.qty END) AS transferQty <!-- 입고 미완료(N) + '적송요청' 유형 -->
		, SUM(CASE WHEN im.inbound_complete = 'N' AND im.inbound_type =
		'기타입고요청' THEN id.qty END) AS inboundQty <!-- 입고 미완료(N) + '기타입고요청' 유형 -->
		, SUM(CASE WHEN im.inbound_complete = 'N' THEN id.qty END) AS
		expectedQty <!-- 미완료 전체 합계 -->
		, SUM(CASE WHEN om.out_complete = 'N' AND om.out_type = '수주' THEN
		od.qty END) AS receivedQty
		, SUM(CASE WHEN om.out_complete = 'N' AND
		om.out_type = '적송요청' THEN
		od.qty END) AS deliveryQty
		, SUM(CASE WHEN
		om.out_complete = 'N' AND om.out_type = '위탁출고요청' THEN
		od.qty END) AS
		shipmentQty
		, SUM(CASE WHEN om.out_complete = 'N' AND om.out_type =
		'기타출고요청' THEN
		od.qty END) AS otherQty
		, SUM(CASE WHEN om.out_complete =
		'N' THEN od.qty END) AS
		expectedOutQty
		FROM warehouse_detail w
		JOIN
		item_master i
		ON w.bu_id = i.bu_id
		LEFT JOIN inbound_detail id
		ON i.bu_id
		= id.bu_id
		AND i.item_id = id.item_id
		AND w.warehouse_id =
		id.warehouse_id
		LEFT JOIN inbound_master im
		ON id.bu_id = im.bu_id
		AND
		id.inbound_id = im.inbound_id
		LEFT JOIN out_detail od
		ON i.bu_id =
		od.bu_id
		AND i.item_id = od.item_id
		AND w.warehouse_id = od.warehouse_id
		LEFT JOIN out_master om
		ON od.bu_id = om.bu_id
		AND od.out_id = om.out_id
		GROUP BY w.warehouse_name, w.warehouse_id, <!-- 결과 묶기 -->
		i.asset_class, i.item_name, i.spec, i.item_id, i.base_unit,
		i.safety_stock_qty
		HAVING NVL(SUM(id.qty),0) > 0
		OR NVL(SUM(od.qty),0) >
		0
		ORDER BY w.warehouse_id, i.item_id <!-- 품번 순서대로 정렬 -->
	</select>

	<select id="searchAvailableItems" parameterType="map"
		resultType="org.logistics.domain.AvailableItemVO">
		SELECT w.bu_id AS buId
		, w.warehouse_name AS warehouseName
		,
		w.warehouse_id AS warehouseId
		, i.asset_class AS assetClass
		,
		i.item_name AS itemName
		, i.spec AS spec
		, i.item_id AS itemId
		,
		i.base_unit AS baseUnit
		, i.safety_stock_qty AS safetyQty
		, SUM(CASE
		WHEN im.inbound_complete = 'N' AND im.inbound_type = '생산의뢰'
		THEN id.qty
		END) AS requestQty
		, SUM(CASE WHEN im.inbound_complete = 'N' AND
		im.inbound_type = '구매발주'
		THEN id.qty END) AS orderQty
		, SUM(CASE WHEN
		im.inbound_complete = 'N' AND im.inbound_type = '적송요청'
		THEN id.qty END)
		AS transferQty
		, SUM(CASE WHEN im.inbound_complete = 'N' AND
		im.inbound_type =
		'기타입고요청' THEN id.qty END) AS inboundQty
		, SUM(CASE
		WHEN im.inbound_complete = 'N' THEN id.qty END) AS
		expectedQty
		,
		SUM(CASE WHEN om.out_complete = 'N' AND om.out_type = '수주' THEN
		od.qty
		END) AS receivedQty
		, SUM(CASE WHEN om.out_complete = 'N' AND
		om.out_type = '적송요청' THEN
		od.qty END) AS deliveryQty
		, SUM(CASE WHEN
		om.out_complete = 'N' AND om.out_type = '위탁출고요청' THEN
		od.qty END) AS
		shipmentQty
		, SUM(CASE WHEN om.out_complete = 'N' AND om.out_type =
		'기타출고요청' THEN
		od.qty END) AS otherQty
		, SUM(CASE WHEN om.out_complete =
		'N' THEN od.qty END) AS
		expectedOutQty

		FROM warehouse_detail w
		JOIN
		warehouse_master wm
		ON w.warehouse_master_id = wm.warehouse_master_id
		JOIN item_master i
		ON w.bu_id = i.bu_id
		LEFT JOIN inbound_detail id
		ON
		i.bu_id = id.bu_id
		AND i.item_id = id.item_id
		AND w.warehouse_id =
		id.warehouse_id
		LEFT JOIN inbound_master im
		ON id.bu_id = im.bu_id
		AND
		id.inbound_id = im.inbound_id
		LEFT JOIN out_detail od
		ON i.bu_id =
		od.bu_id
		AND i.item_id = od.item_id
		AND w.warehouse_id = od.warehouse_id
		LEFT JOIN out_master om
		ON od.bu_id = om.bu_id
		AND od.out_id = om.out_id
		<where>
			<if test="buId != null and buId != ''">
				AND w.bu_id = #{buId}
			</if>
			<if test="warehouseName != null and warehouseName != ''">
				AND w.warehouse_name LIKE '%' || #{warehouseName} || '%'
			</if>
			<if test="assetClass != null and assetClass != ''">
				AND i.asset_class LIKE '%' || #{assetClass} || '%'
			</if>
			<if test="bigCategory != null and bigCategory != ''">
				AND i.big_category = #{bigCategory}
			</if>
			<if test="midCategory != null and midCategory != ''">
				AND i.mid_category = #{midCategory}
			</if>
			<if test="smallCategory != null and smallCategory != ''">
				AND i.small_category = #{smallCategory}
			</if>
			<if test="itemName != null and itemName != ''">
				AND i.item_name LIKE '%' || #{itemName} || '%'
			</if>
			<if test="itemId != null and itemId != ''">
				AND i.item_id LIKE '%' || #{itemId} || '%'
			</if>
		</where>
		GROUP BY w.bu_id, w.warehouse_name, w.warehouse_id,
		i.asset_class,
		i.item_name, i.spec, i.item_id, i.base_unit, i.safety_stock_qty
		HAVING
		SUM(id.qty) > 0 OR SUM(od.qty) > 0
		ORDER BY w.warehouse_id, i.item_id
	</select>

    <select id="getBusinessUnits" resultType="org.logistics.domain.AvailableItemVO">
        SELECT bu_id   AS buId
             , bu_name AS buName
        FROM business_unit
    </select>

    <!-- 자산분류 목록 -->
    <select id="getAssetClasses" resultType="org.logistics.domain.AvailableItemVO">
        SELECT DISTINCT asset_class AS assetClass
        FROM item_master
    </select>
    
</mapper>
