<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.logistics.mapper.StockSummaryMapper">

<!--
<mapper> 및 <resultMap> 태그
	<mapper namespace="org.logistics.mapper.StockSummaryMapper">:
	이 XML 파일이 어떤 Java 인터페이스에 연결되는지 정의합니다.
	namespace 속성 값은 반드시 StockSummaryMapper.java의 전체 경로와 일치해야 합니다.
	
	<resultMap id="stockSummaryResultMap" ...
-->

	<!-- 메인 조회 쿼리 -->
	<resultMap id="stockSummaryResultMap" type="org.logistics.domain.StockSummaryResultDto">
    	<result column="ITEM_INTERNAL_CODE" property="itemInternalCode"/>
    	<result column="ITEM_ASSET_CLASS" property="itemAssetClass"/>
    	<result column="ITEM_BIG_CATEGORY" property="itemBigCategory"/>
    	<result column="ITEM_MID_CATEGORY" property="itemMidCategory"/>
    	<result column="ITEM_NAME" property="itemName"/>
    	<result column="INBOUND_QTY" property="inboundQty"/>
    	<result column="ITEM_UNIT" property="itemUnit"/>
    	<result column="ITEM_STATUS" property="itemStatus"/>
    	<result column="STOCK_QTY" property="stockQty"/>
    	<result column="CARRIED_OVER_QTY" property="carriedOverQty"/>
    	<result column="OUTBOUND_QTY" property="outboundQty"/>
    	<result column="PRODUCTION_INBOUND" property="productionInbound"/>
    	<result column="OUTSOURCING_INBOUND" property="outsourcingInbound"/>
    	<result column="PURCHASE_INBOUND" property="purchaseInbound"/>
    	<result column="IMPORT_INBOUND" property="importInbound"/>
    	<result column="DELIVERY_SLIP_OUTBOUND" property="deliverySlipOutbound"/>
    	<result column="OTHER_OUTBOUND" property="otherOutbound"/>
    	<result column="SALES_CONSIGNMENT_OUTBOUND" property="salesConsignmentOutbound"/>
    	<result column="WORK_PERFORMANCE_OUTBOUND" property="workPerformanceOutbound"/>
    	<result column="OUTSOURCING_OUTBOUND" property="outsourcingOutbound"/>
	</resultMap>	
	<!-- resultMap 태그를 사용하여 데이터베이스 컬럼(column)과 DTO의 필드명(property)을 정확히 1:1로 매칭 -->

	<select id="selectStockSummaryList" parameterType="org.logistics.domain.SearchCriteriaDto" resultMap="stockSummaryResultMap">
	    WITH CarriedOver AS (
	        SELECT
	            COALESCE(T1.item_id, T3.item_id) AS item_id,
	            SUM(NVL(T1.qty, 0)) - SUM(NVL(T3.qty, 0)) AS carried_over_qty
	        FROM
	            inbound_detail T1
	        LEFT JOIN
	            inbound_master T2 ON T1.inbound_id = T2.inbound_id
	        LEFT JOIN
	            out_detail T3 ON T1.item_id = T3.item_id
	        LEFT JOIN
	            out_master T4 ON T3.out_id = T4.out_id
	        WHERE 1=1
	        <if test="searchPeriodStart != null">
	            AND (T2.inbound_date &lt; #{searchPeriodStart, jdbcType=DATE} OR T4.out_date &lt; #{searchPeriodStart, jdbcType=DATE})
	        </if>
	        <if test="businessBuName != null and businessBuName != ''">
	            AND T1.bu_id = (SELECT bu_id FROM business_unit WHERE bu_name = #{businessBuName})
	        </if>
	        GROUP BY
	            COALESCE(T1.item_id, T3.item_id)
	    ),
	    PeriodInbound AS (
	        SELECT
	            T1.item_id,
	            SUM(T1.qty) AS inbound_qty,
	            SUM(CASE WHEN T2.inbound_type = '생산입고' THEN T1.qty ELSE 0 END) AS production_inbound,
	            SUM(CASE WHEN T2.inbound_type = '외주입고' THEN T1.qty ELSE 0 END) AS outsourcing_inbound,
	            SUM(CASE WHEN T2.inbound_type = '구매입고' THEN T1.qty ELSE 0 END) AS purchase_inbound,
	            SUM(CASE WHEN T2.inbound_type = '수입입고' THEN T1.qty ELSE 0 END) AS import_inbound
	        FROM inbound_detail T1
	        JOIN inbound_master T2 ON T1.inbound_id = T2.inbound_id
	        WHERE 1=1
	        <if test="searchPeriodStart != null and searchPeriodEnd != null">
	            AND T2.inbound_date BETWEEN #{searchPeriodStart, jdbcType=DATE} AND #{searchPeriodEnd, jdbcType=DATE}
	        </if>
	        <if test="businessBuName != null and businessBuName != ''">
	            AND T1.bu_id = (SELECT bu_id FROM business_unit WHERE bu_name = #{businessBuName})
	        </if>
	        GROUP BY T1.item_id
	    ),
	    PeriodOutbound AS (
	        SELECT
	            T1.item_id,
	            SUM(T1.qty) AS outbound_qty,
	            SUM(CASE WHEN T2.out_type = '거래명세표' THEN T1.qty ELSE 0 END) AS delivery_slip_outbound,
	            SUM(CASE WHEN T2.out_type = '기타출고' THEN T1.qty ELSE 0 END) AS other_outbound,
	            SUM(CASE WHEN T2.out_type = '판매보관품출고' THEN T1.qty ELSE 0 END) AS sales_consignment_outbound,
	            SUM(CASE WHEN T2.out_type = '작업실적' THEN T1.qty ELSE 0 END) AS work_performance_outbound,
	            SUM(CASE WHEN T2.out_type = '외주입고' THEN T1.qty ELSE 0 END) AS outsourcing_outbound
	        FROM out_detail T1
	        JOIN out_master T2 ON T1.out_id = T2.out_id
	        WHERE 1=1
	        <if test="searchPeriodStart != null and searchPeriodEnd != null">
	            AND T2.out_date BETWEEN #{searchPeriodStart, jdbcType=DATE} AND #{searchPeriodEnd, jdbcType=DATE}
	        </if>
	        <if test="businessBuName != null and businessBuName != ''">
	            AND T1.bu_id = (SELECT bu_id FROM business_unit WHERE bu_name = #{businessBuName})
	        </if>
	        GROUP BY T1.item_id
	    )
	    SELECT
	        IM.item_id AS ITEM_INTERNAL_CODE,
	        IM.asset_class AS ITEM_ASSET_CLASS,
	        IM.big_category AS ITEM_BIG_CATEGORY,
	        IM.mid_category AS ITEM_MID_CATEGORY,
	        IM.item_name AS ITEM_NAME,
	        IM.base_unit AS ITEM_UNIT,
	        IM.item_status AS ITEM_STATUS,
	        COALESCE(PI.inbound_qty, 0) AS INBOUND_QTY,
	        COALESCE(PO.outbound_qty, 0) AS OUTBOUND_QTY,
	        (COALESCE(C.carried_over_qty, 0) + COALESCE(PI.inbound_qty, 0) - COALESCE(PO.outbound_qty, 0)) AS STOCK_QTY,
	        COALESCE(C.carried_over_qty, 0) AS CARRIED_OVER_QTY,
	        COALESCE(PI.production_inbound, 0) AS PRODUCTION_INBOUND,
	        COALESCE(PI.outsourcing_inbound, 0) AS OUTSOURCING_INBOUND,
	        COALESCE(PI.purchase_inbound, 0) AS PURCHASE_INBOUND,
	        COALESCE(PI.import_inbound, 0) AS IMPORT_INBOUND,
	        COALESCE(PO.delivery_slip_outbound, 0) AS DELIVERY_SLIP_OUTBOUND,
	        COALESCE(PO.other_outbound, 0) AS OTHER_OUTBOUND,
	        COALESCE(PO.sales_consignment_outbound, 0) AS SALES_CONSIGNMENT_OUTBOUND,
	        COALESCE(PO.work_performance_outbound, 0) AS WORK_PERFORMANCE_OUTBOUND,
	        COALESCE(PO.outsourcing_outbound, 0) AS OUTSOURCING_OUTBOUND
	    FROM item_master IM
	    LEFT JOIN PeriodInbound PI ON IM.item_id = PI.item_id
	    LEFT JOIN PeriodOutbound PO ON IM.item_id = PO.item_id
	    LEFT JOIN CarriedOver C ON IM.item_id = C.item_id
	    WHERE 1=1
	    <if test="businessBuName != null and businessBuName != ''">
	        AND IM.bu_id = (SELECT bu_id FROM business_unit WHERE bu_name = #{businessBuName})
	    </if>
	    <if test="itemAssetClass != null and itemAssetClass != ''">
	        AND IM.asset_class = #{itemAssetClass}
	    </if>
	    <if test="itemBigCategory != null and itemBigCategory != ''">
	        AND IM.big_category = #{itemBigCategory}
	    </if>
	    <if test="itemMidCategory != null and itemMidCategory != ''">
	        AND IM.mid_category = #{itemMidCategory}
	    </if>
	    <if test="itemSmallCategory != null and itemSmallCategory != ''">
	        AND IM.small_category = #{itemSmallCategory}
	    </if>
	    <if test="itemName != null and itemName != ''">
	        AND IM.item_name LIKE '%' || #{itemName} || '%'
	    </if>
	    <if test="itemInternalCode != null and itemInternalCode != ''">
	        AND IM.item_id = #{itemInternalCode}
	    </if>
	    <if test="itemStatus != null and itemStatus != ''">
	        AND IM.item_status = #{itemStatus}
	    </if>
	    <if test="includeZeroQty != true">
	        AND (COALESCE(PI.inbound_qty, 0) > 0 OR COALESCE(PO.outbound_qty, 0) > 0 OR COALESCE(C.carried_over_qty, 0) > 0)
	    </if>
	    ORDER BY
	        IM.item_name
	</select>
    
    <!-- 모달 조회 쿼리 -->
    <resultMap id="itemCategoryResultMap" type="org.logistics.domain.ItemCategoryDto">
    	<result column="BIG_CATEGORY" property="bigCategory"/>
    	<result column="MID_CATEGORY" property="midCategory"/>
    	<result column="SMALL_CATEGORY" property="smallCategory"/>
    </resultMap>
    
    <!-- 테이블에서 중복되지 않는(distinct) 품목 대분류를 조회하는 쿼리 -->
    <select id="selectDistinctBigCategories" resultMap="itemCategoryResultMap">
    	SELECT DISTINCT big_category FROM item_master
    	<where> <!-- 태그 내부의 <if> 조건이 거짓이면 아무것도 추가되지 않음 -->
        	<if test="searchTerm != null and searchTerm != ''">
            	big_category LIKE CONCAT(CONCAT('%', #{searchTerm}), '%')
        	</if>
    	</where>
    	ORDER BY big_category
	</select>
	
	<!-- 테이블에서 중복되지 않는 품목 중분류를 조회하는 쿼리 -->
	<select id="selectDistinctMidCategories" resultMap="itemCategoryResultMap">
	    SELECT DISTINCT big_category, mid_category FROM item_master
	    <where>
	        <if test="searchTerm != null and searchTerm != ''">
	            mid_category LIKE CONCAT(CONCAT('%', #{searchTerm}), '%')
	        </if>
	    </where>
	    ORDER BY big_category, mid_category
	</select>
	
	<!-- 테이블에서 중복되지 않는 품목 소분류를 조회하는 쿼리 -->
	<select id="selectDistinctSmallCategories" resultMap="itemCategoryResultMap">
	    SELECT DISTINCT big_category, mid_category, small_category FROM item_master
	    <where>
	        <if test="searchTerm != null and searchTerm != ''">
	            small_category LIKE CONCAT(CONCAT('%', #{searchTerm}), '%')
	        </if>
	    </where>
	    ORDER BY big_category, mid_category, small_category
	</select>
	
	<!-- 사업단위별 재고원장조회 쿼리 -->
	<resultMap id="stockLedgerResultMap" type="org.logistics.domain.StockLedgerResultDto">
		<result column="TRANSACTION_DATE" property="transactionDate"/> <!-- 일자 -->
		<result column="TYPE" property="type"/> <!-- 구분(이월재고 등) -->
		<result column="INOUT_TYPE" property="inOutboundType"/> <!-- 입출고구분 -->
		<result column="INOUT_CATEGORY" property="inOutboundCategory"/> <!-- 입출고유형 -->
		<result column="UNIT" property="unit"/> <!-- 단위 -->
		<result column="INBOUND_QTY" property="inboundQty"/> <!-- 입고수량 -->
		<result column="OUTBOUND_QTY" property="outboundQty"/> <!-- 출고수량 -->
		<result column="STOCK_QTY" property="stockQty"/> <!-- 재고수량 -->
		<result column="MANAGEMENT_ID" property="managementId"/> <!-- 관리번호 -->
		<result column="BUSINESS_UNIT" property="businessUnit"/> <!-- 사업단위 -->
		<result column="INBOUND_WAREHOUSE" property="inboundWarehouse"/> <!-- 입고창고 -->
		<result column="OUTBOUND_WAREHOUSE" property="outboundWarehouse"/> <!-- 출고창고 -->
		<result column="CUSTOMER" property="customer"/> <!-- 거래처 -->
		<result column="PROCESSING_DEPARTMENT" property="processingDepartment"/> <!-- 처리부서 -->
		<result column="PROCESSOR" property="processor"/> <!-- 처리자 -->
		<result column="TRANSACTION_TYPE" property="transactionType"/> <!-- 거래 타입 -->
		<result column="TRANSACTION_ID" property="transactionId"/> <!-- 고유 ID -->
		
	</resultMap>
	
	<select id="selectStockLedgerList" resultMap="stockLedgerResultMap" parameterType="org.logistics.domain.SearchCriteriaDto">
	    WITH ALL_TRANSACTIONS AS (
	        SELECT
	            T2.inbound_date AS transaction_date,
	            T2.inbound_id AS management_id,
	            '입고' AS in_outbound_type,
	            '기간계' AS type,
	            T2.inbound_type AS in_outbound_category,
	            T1.qty AS inbound_qty,
	            0 AS outbound_qty,
	            T1.bu_id,
	            T1.item_id,
	            T1.warehouse_id AS inbound_warehouse_id,
	            NULL AS outbound_warehouse_id,
	            T2.partner_id AS customer_party_id
	        FROM inbound_detail T1
	        JOIN inbound_master T2 ON T1.inbound_id = T2.inbound_id
	        <where>
	            <if test="searchPeriodStart != null">
	                AND T2.inbound_date &gt;= #{searchPeriodStart}
	            </if>
	            <if test="searchPeriodEnd != null">
	                AND T2.inbound_date &lt;= #{searchPeriodEnd}
	            </if>
	            <if test="businessBuName != null and businessBuName != ''">
	                AND T1.bu_id = (SELECT bu_id FROM business_unit WHERE bu_name = #{businessBuName})
	            </if>
	        </where>
	        UNION ALL
	        SELECT
	            T2.out_date AS transaction_date,
	            T2.out_id AS management_id,
	            '출고' AS in_outbound_type,
	            '기간계' AS type,
	            T2.out_type AS in_outbound_category,
	            0 AS inbound_qty,
	            T1.qty AS outbound_qty,
	            T1.bu_id,
	            T1.item_id,
	            NULL AS inbound_warehouse_id,
	            T1.warehouse_id AS outbound_warehouse_id,
	            T2.party_id AS customer_party_id
	        FROM out_detail T1
	        JOIN out_master T2 ON T1.out_id = T2.out_id
	        <where>
	            <if test="searchPeriodStart != null">
	                AND T2.out_date &gt;= #{searchPeriodStart}
	            </if>
	            <if test="searchPeriodEnd != null">
	                AND T2.out_date &lt;= #{searchPeriodEnd}
	            </if>
	            <if test="businessBuName != null and businessBuName != ''">
	                AND T1.bu_id = (SELECT bu_id FROM business_unit WHERE bu_name = #{businessBuName})
	            </if>
	        </where>
	    )
	    SELECT
	        T.transaction_date,
	        T.in_outbound_type,
	        T.in_outbound_category,
	        I.item_name,
	        I.base_unit AS unit,
	        T.inbound_qty,
	        T.outbound_qty,
	        SUM(T.inbound_qty - T.outbound_qty) OVER (ORDER BY T.transaction_date, T.management_id) AS stock_qty,
	        T.management_id,
	        BU.bu_name AS business_unit,
	        WH_IN.warehouse_name AS inbound_warehouse,
	        WH_OUT.warehouse_name AS outbound_warehouse,
	        P.party_name AS customer
	    FROM ALL_TRANSACTIONS T
	    LEFT JOIN item_master I ON T.item_id = I.item_id AND T.bu_id = I.bu_id
	    LEFT JOIN business_unit BU ON T.bu_id = BU.bu_id
	    LEFT JOIN warehouse_detail WH_IN ON T.inbound_warehouse_id = WH_IN.warehouse_id AND T.bu_id = WH_IN.bu_id
	    LEFT JOIN warehouse_detail WH_OUT ON T.outbound_warehouse_id = WH_OUT.warehouse_id AND T.bu_id = WH_OUT.bu_id
	    LEFT JOIN party P ON T.customer_party_id = P.party_id AND T.bu_id = P.bu_id
	    ORDER BY T.transaction_date, T.management_id
	</select>
    
    <select id="selectCarriedOverStock" resultMap="stockSummaryResultMap" parameterType="org.logistics.domain.SearchCriteriaDto">
		WITH INBOUND_HISTORY AS (
		    SELECT
		        T1.bu_id,
		        T1.item_id,
		        SUM(T1.qty) AS total_inbound_qty
		    FROM inbound_detail T1
		    JOIN inbound_master T2 ON T1.inbound_id = T2.inbound_id
		    WHERE T2.inbound_date &lt; #{searchPeriodStart}
		    <if test="businessBuName != null and businessBuName != ''">
		        AND T1.bu_id = (SELECT bu_id FROM business_unit WHERE bu_name = #{businessBuName})
		    </if>
		    GROUP BY T1.bu_id, T1.item_id
		),
		OUTBOUND_HISTORY AS (
		    SELECT
		        T1.bu_id,
		        T1.item_id,
		        SUM(T1.qty) AS total_outbound_qty
		    FROM out_detail T1
		    JOIN out_master T2 ON T1.out_id = T2.out_id
		    WHERE T2.out_date &lt; #{searchPeriodStart}
		    <if test="businessBuName != null and businessBuName != ''">
		        AND T1.bu_id = (SELECT bu_id FROM business_unit WHERE bu_name = #{businessBuName})
		    </if>
		    GROUP BY T1.bu_id, T1.item_id
		)
		SELECT
		    COALESCE(A.bu_id, B.bu_id) AS bu_id,
		    COALESCE(A.item_id, B.item_id) AS item_internal_code,
		    SUM(COALESCE(A.total_inbound_qty, 0) - COALESCE(B.total_outbound_qty, 0)) AS carried_over_qty
		FROM INBOUND_HISTORY A
		FULL OUTER JOIN OUTBOUND_HISTORY B
		ON A.bu_id = B.bu_id AND A.item_id = B.item_id
		GROUP BY COALESCE(A.bu_id, B.bu_id), COALESCE(A.item_id, B.item_id)
		HAVING SUM(COALESCE(A.total_inbound_qty, 0) - COALESCE(B.total_outbound_qty, 0)) != 0
	</select>
    
    
</mapper>